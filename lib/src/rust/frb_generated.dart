// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/nats.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiNatsInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -1074475804;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_flutter_nats',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiNatsSendRequestWithCallbacks(
      {required String clientId,
      required String subject,
      required String payload,
      required BigInt timeoutMs,
      required FutureOr<void> Function(String) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<void> crateApiNatsConnectToNats(
      {required String clientId,
      required String endPoint,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<void> crateApiNatsDisconnectFromNats(
      {required String clientId,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<void> crateApiNatsInitApp();

  Future<void> crateApiNatsKvDelete(
      {required String clientId,
      required String bucketName,
      required String key,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<void> crateApiNatsKvGet(
      {required String clientId,
      required String bucketName,
      required String key,
      required FutureOr<void> Function(String) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<void> crateApiNatsKvPut(
      {required String clientId,
      required String bucketName,
      required String key,
      required String value,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<List<String>> crateApiNatsListClients();

  Future<List<String>> crateApiNatsListSubscriptions(
      {required String clientId});

  Future<void> crateApiNatsPublish(
      {required String clientId,
      required String subject,
      required String payload,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure});

  Future<String> crateApiNatsSendRequest(
      {required String clientId,
      required String subject,
      required String payload,
      required BigInt timeoutMs});

  Future<void> crateApiNatsSetupResponder(
      {required String clientId,
      required String subject,
      required String responderId,
      required FutureOr<String> Function(String) processRequest,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onError});

  Future<void> crateApiNatsSubscribe(
      {required String clientId,
      required String subject,
      required String subscriptionId,
      required int maxMessages,
      required FutureOr<void> Function(String, String) onMessage,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onError,
      required FutureOr<void> Function() onDone});

  Future<void> crateApiNatsUnsubscribe(
      {required String clientId,
      required String subscriptionId,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiNatsSendRequestWithCallbacks(
      {required String clientId,
      required String subject,
      required String payload,
      required BigInt timeoutMs,
      required FutureOr<void> Function(String) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(subject, serializer);
        sse_encode_String(payload, serializer);
        sse_encode_u_64(timeoutMs, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsSendRequestWithCallbacksConstMeta,
      argValues: [clientId, subject, payload, timeoutMs, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsSendRequestWithCallbacksConstMeta =>
      const TaskConstMeta(
        debugName: "_send_request_with_callbacks",
        argNames: [
          "clientId",
          "subject",
          "payload",
          "timeoutMs",
          "onSuccess",
          "onFailure"
        ],
      );

  @override
  Future<void> crateApiNatsConnectToNats(
      {required String clientId,
      required String endPoint,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(endPoint, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsConnectToNatsConstMeta,
      argValues: [clientId, endPoint, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsConnectToNatsConstMeta => const TaskConstMeta(
        debugName: "connect_to_nats",
        argNames: ["clientId", "endPoint", "onSuccess", "onFailure"],
      );

  @override
  Future<void> crateApiNatsDisconnectFromNats(
      {required String clientId,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsDisconnectFromNatsConstMeta,
      argValues: [clientId, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsDisconnectFromNatsConstMeta =>
      const TaskConstMeta(
        debugName: "disconnect_from_nats",
        argNames: ["clientId", "onSuccess", "onFailure"],
      );

  @override
  Future<void> crateApiNatsInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiNatsKvDelete(
      {required String clientId,
      required String bucketName,
      required String key,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(bucketName, serializer);
        sse_encode_String(key, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsKvDeleteConstMeta,
      argValues: [clientId, bucketName, key, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsKvDeleteConstMeta => const TaskConstMeta(
        debugName: "kv_delete",
        argNames: ["clientId", "bucketName", "key", "onSuccess", "onFailure"],
      );

  @override
  Future<void> crateApiNatsKvGet(
      {required String clientId,
      required String bucketName,
      required String key,
      required FutureOr<void> Function(String) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(bucketName, serializer);
        sse_encode_String(key, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsKvGetConstMeta,
      argValues: [clientId, bucketName, key, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsKvGetConstMeta => const TaskConstMeta(
        debugName: "kv_get",
        argNames: ["clientId", "bucketName", "key", "onSuccess", "onFailure"],
      );

  @override
  Future<void> crateApiNatsKvPut(
      {required String clientId,
      required String bucketName,
      required String key,
      required String value,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(bucketName, serializer);
        sse_encode_String(key, serializer);
        sse_encode_String(value, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsKvPutConstMeta,
      argValues: [clientId, bucketName, key, value, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsKvPutConstMeta => const TaskConstMeta(
        debugName: "kv_put",
        argNames: [
          "clientId",
          "bucketName",
          "key",
          "value",
          "onSuccess",
          "onFailure"
        ],
      );

  @override
  Future<List<String>> crateApiNatsListClients() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsListClientsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsListClientsConstMeta => const TaskConstMeta(
        debugName: "list_clients",
        argNames: [],
      );

  @override
  Future<List<String>> crateApiNatsListSubscriptions(
      {required String clientId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsListSubscriptionsConstMeta,
      argValues: [clientId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsListSubscriptionsConstMeta =>
      const TaskConstMeta(
        debugName: "list_subscriptions",
        argNames: ["clientId"],
      );

  @override
  Future<void> crateApiNatsPublish(
      {required String clientId,
      required String subject,
      required String payload,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(subject, serializer);
        sse_encode_String(payload, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsPublishConstMeta,
      argValues: [clientId, subject, payload, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsPublishConstMeta => const TaskConstMeta(
        debugName: "publish",
        argNames: ["clientId", "subject", "payload", "onSuccess", "onFailure"],
      );

  @override
  Future<String> crateApiNatsSendRequest(
      {required String clientId,
      required String subject,
      required String payload,
      required BigInt timeoutMs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(subject, serializer);
        sse_encode_String(payload, serializer);
        sse_encode_u_64(timeoutMs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiNatsSendRequestConstMeta,
      argValues: [clientId, subject, payload, timeoutMs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsSendRequestConstMeta => const TaskConstMeta(
        debugName: "send_request",
        argNames: ["clientId", "subject", "payload", "timeoutMs"],
      );

  @override
  Future<void> crateApiNatsSetupResponder(
      {required String clientId,
      required String subject,
      required String responderId,
      required FutureOr<String> Function(String) processRequest,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onError}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(subject, serializer);
        sse_encode_String(responderId, serializer);
        sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
            processRequest, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onError, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsSetupResponderConstMeta,
      argValues: [
        clientId,
        subject,
        responderId,
        processRequest,
        onSuccess,
        onError
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsSetupResponderConstMeta => const TaskConstMeta(
        debugName: "setup_responder",
        argNames: [
          "clientId",
          "subject",
          "responderId",
          "processRequest",
          "onSuccess",
          "onError"
        ],
      );

  @override
  Future<void> crateApiNatsSubscribe(
      {required String clientId,
      required String subject,
      required String subscriptionId,
      required int maxMessages,
      required FutureOr<void> Function(String, String) onMessage,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onError,
      required FutureOr<void> Function() onDone}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(subject, serializer);
        sse_encode_String(subscriptionId, serializer);
        sse_encode_u_32(maxMessages, serializer);
        sse_encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
            onMessage, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onError, serializer);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            onDone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsSubscribeConstMeta,
      argValues: [
        clientId,
        subject,
        subscriptionId,
        maxMessages,
        onMessage,
        onSuccess,
        onError,
        onDone
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsSubscribeConstMeta => const TaskConstMeta(
        debugName: "subscribe",
        argNames: [
          "clientId",
          "subject",
          "subscriptionId",
          "maxMessages",
          "onMessage",
          "onSuccess",
          "onError",
          "onDone"
        ],
      );

  @override
  Future<void> crateApiNatsUnsubscribe(
      {required String clientId,
      required String subscriptionId,
      required FutureOr<void> Function(bool) onSuccess,
      required FutureOr<void> Function(String) onFailure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(subscriptionId, serializer);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            onSuccess, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            onFailure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNatsUnsubscribeConstMeta,
      argValues: [clientId, subscriptionId, onSuccess, onFailure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNatsUnsubscribeConstMeta => const TaskConstMeta(
        debugName: "unsubscribe",
        argNames: ["clientId", "subscriptionId", "onSuccess", "onFailure"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_String_AnyhowException(
          FutureOr<String> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_unit_AnyhowException(
          FutureOr<void> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
          FutureOr<void> Function(String, String) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_String(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(bool) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_bool(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  FutureOr<String> Function(String)
      dco_decode_DartFn_Inputs_String_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String)
      dco_decode_DartFn_Inputs_String_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, String)
      dco_decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function()
      dco_decode_DartFn_Inputs__Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool)
      dco_decode_DartFn_Inputs_bool_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
      FutureOr<void> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
      FutureOr<void> Function(String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_String_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_unit_AnyhowException(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
